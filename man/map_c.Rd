% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map-combine.R
\name{map_c}
\alias{map_c}
\alias{map_rbind}
\alias{map_cbind}
\title{Apply a function to each element of a vector and combine the results}
\usage{
map_c(.x, .f, ..., .ptype = NULL)

map_rbind(.x, .f, ..., .id = NULL, .ptype = NULL)

map_cbind(
  .x,
  .f,
  ...,
  .name_repair = c("unique", "universal", "check_unique"),
  .size = NULL
)
}
\arguments{
\item{.x}{A list or atomic vector.}

\item{.f}{A function, formula, or vector (not necessarily atomic).

If a \strong{function}, it is used as is.

If a \strong{formula}, e.g. \code{~ .x + 2}, it is converted to a function. There
are three ways to refer to the arguments:
\itemize{
\item For a single argument function, use \code{.}
\item For a two argument function, use \code{.x} and \code{.y}
\item For more arguments, use \code{..1}, \code{..2}, \code{..3} etc
}

This syntax allows you to create very compact anonymous
functions. Note that formula functions conceptually take dots
(that's why you can use \code{..1} etc). They silently ignore
additional arguments that are not used in the formula expression.

If \strong{character vector}, \strong{numeric vector}, or \strong{list}, it is
converted to an extractor function. Character vectors index by
name and numeric vectors index by position; use a list to index
by position and name at different levels. If a component is not
present, the value of \code{.default} will be returned.}

\item{...}{Additional arguments passed on to the mapped function.}

\item{.ptype}{An optional prototype to ensure that the output type is always
the same.}

\item{.name_repair}{One of \code{"unique"}, \code{"universal"}, or \code{"check_unique"}.
See \code{\link[vctrs:vec_as_names]{vctrs::vec_as_names()}} for the meaning of these options.}

\item{.size}{An optional integer size to ensure that every input has the
same size (i.e. number of rows).}
}
\description{
These functions are variants of \code{\link[=map]{map()}} that combine the results with
\code{\link[=list_c]{list_c()}}, \code{\link[=list_rbind]{list_rbind()}}, and \code{\link[=list_cbind]{list_cbind()}} respectively. Compared
to \code{map()}, \code{.f} can return an output of any length, which means that
there's no longer a one-to-one correspondence between each element of the
input and each element of the output
}
\examples{
map(1:3, ~ rep(.x, .x))
map_c(1:3, ~ rep(.x, .x))
}
