% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modify-tree.R
\name{modify_tree}
\alias{modify_tree}
\title{Recursively modify a list}
\usage{
modify_tree(
  x,
  f_leaf = identity,
  p_leaf = NULL,
  f_pre = identity,
  f_post = identity
)
}
\arguments{
\item{x}{A list.}

\item{f_leaf}{A function applied to each leaf.}

\item{p_leaf}{A predicate function that returns \code{TRUE} when an element is
a leaf, determining whether \code{f_leaf} or \code{f_pre}/\code{f_post} is applied to
it. The default value, \code{NULL}, treats lists as nodes and everything else
as leaves.}

\item{f_pre, f_post}{Functions applied to each node. \code{f_pre} is applied
the tree is traversed "down", i.e. before the leaves are transformed
with \code{f_leaf}, while \code{f_post} is applied on the way "up", i.e.
after the leaves are transformed.}
}
\description{
\code{modify_tree()} allows you to recursively modify a list, supplying functions
that either modify each leaf or each node (or both).
}
\examples{
x <- list(list(a = 2:1, c = list(b1 = 2), b = list(c2 = 3, c1 = 4)))
x |> str()

# Transform each leaf
x |> modify_tree(f_leaf = \(x) x + 100) |>  str()

# Recursively sort the nodes
sort_named <- function(x) {
  nms <- names(x)
  if (!is.null(nms)) {
    x[order(nms)]
  } else {
    x
   }
}
x |> modify_tree(f_post = sort_named) |> str()
}
\seealso{
Other map variants: 
\code{\link{imap}()},
\code{\link{lmap}()},
\code{\link{map2}()},
\code{\link{map_if}()},
\code{\link{map}()},
\code{\link{modify}()},
\code{\link{pmap}()}
}
\concept{map variants}
