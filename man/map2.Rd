% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map2.R
\name{map2}
\alias{map2}
\alias{map2_lgl}
\alias{map2_int}
\alias{map2_dbl}
\alias{map2_chr}
\alias{map2_raw}
\alias{map2_dfr}
\alias{map2_dfc}
\alias{map2_df}
\alias{walk2}
\title{Map over two inputs}
\usage{
map2(.x, .y, .f, ...)

map2_lgl(.x, .y, .f, ...)

map2_int(.x, .y, .f, ...)

map2_dbl(.x, .y, .f, ...)

map2_chr(.x, .y, .f, ...)

map2_raw(.x, .y, .f, ...)

map2_dfr(.x, .y, .f, ..., .id = NULL)

map2_dfc(.x, .y, .f, ...)

walk2(.x, .y, .f, ...)
}
\arguments{
\item{.x, .y}{Vectors of the same length. A vector of length 1 will
be recycled.

Note that the arguments that differ in each call come before \code{.f},
and the arguments that are the same come after \code{.f}.}

\item{.f}{A function, formula, or vector (not necessarily atomic).

If a \strong{function}, it is used as is.

If a \strong{formula}, e.g. \code{~ .x + 2}, it is converted to a function. There
are three ways to refer to the arguments:
\itemize{
\item For a single argument function, use \code{.}
\item For a two argument function, use \code{.x} and \code{.y}
\item For more arguments, use \code{..1}, \code{..2}, \code{..3} etc
}

This syntax allows you to create very compact anonymous
functions. Note that formula functions conceptually take dots
(that's why you can use \code{..1} etc). They silently ignore
additional arguments that are not used in the formula expression.

If \strong{character vector}, \strong{numeric vector}, or \strong{list}, it is
converted to an extractor function. Character vectors index by
name and numeric vectors index by position; use a list to index
by position and name at different levels. If a component is not
present, the value of \code{.default} will be returned.}

\item{...}{Additional arguments passed on to the mapped function.}

\item{.id}{Either a string or \code{NULL}. If a string, the output will contain
a variable with that name, storing either the name (if \code{.x} is named) or
the index (if \code{.x} is unnamed) of the input. If \code{NULL}, the default, no
variable will be created.

Only applies to \verb{_dfr} variant.}
}
\value{
The output type is determined by the suffix:
\itemize{
\item No suffix: returns a list the same length as the input. It will be
named if the input was named.
\item \verb{_lgl}, \verb{_int}, \verb{_dbl}, \verb{_chr} return a logical, integer, double,
or character vector respectively. The output of \code{.f} will only be
automatically coerced upwards (i.e. logical -> integer -> double ->
character). It will be named if the input was named.
\item \verb{_dfc} and \verb{_dfr()} all return a data frame created by row-binding and
column-binding respectively. They require dplyr to be installed.
}

\itemize{
\item \code{walk()} returns the input \code{.x} (invisibly). This makes it easy to
use in pipe.
}
}
\description{
These functions are variants of \code{\link[=map]{map()}} that iterate over two arguments at
a time.
}
\examples{
x <- list(1, 1, 1)
y <- list(10, 20, 30)

map2(x, y, ~ .x + .y)
# Or just
map2(x, y, `+`)

# Split into pieces, fit model to each piece, then predict
by_cyl <- mtcars \%>\% split(.$cyl)
mods <- by_cyl \%>\% map(~ lm(mpg ~ wt, data = .))
map2(mods, by_cyl, predict)
}
\seealso{
Other map variants: 
\code{\link{imap}()},
\code{\link{invoke}()},
\code{\link{lmap}()},
\code{\link{map_if}()},
\code{\link{map}()},
\code{\link{modify}()},
\code{\link{pmap}()}
}
\concept{map variants}
