% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map2.R
\name{map2}
\alias{map2}
\alias{map2_lgl}
\alias{map2_int}
\alias{map2_dbl}
\alias{map2_chr}
\alias{walk2}
\title{Map over two inputs}
\usage{
map2(.x, .y, .f, ..., .progress = NULL)

map2_lgl(.x, .y, .f, ..., .progress = NULL)

map2_int(.x, .y, .f, ..., .progress = NULL)

map2_dbl(.x, .y, .f, ..., .progress = NULL)

map2_chr(.x, .y, .f, ..., .progress = NULL)

walk2(.x, .y, .f, ...)
}
\arguments{
\item{.x, .y}{A pair of vectors, usually the same length. If not, a vector
of length 1 will be recycled to the length of the other.}

\item{.f}{A function, specified in one of the following ways:
\itemize{
\item A named function.
\item An anonymous function, e.g. \verb{\\(x, y) x + y} or \code{function(x, y) x + y}.
\item A formula, e.g. \code{~ .x + .y}. You must use \code{.x} to refer to the current
element of \code{x} and \code{.y} to refer to the current element of \code{y}. Only
recommended if you require backward compatibility with older versions
of R.
}}

\item{...}{Additional arguments passed on to the mapped function.

Note that the arguments that differ in each call come before \code{.f},
and the arguments that are the same come after \code{.f}.}

\item{.progress}{Whether to show a progress bar. See \link{progress_bars}
for details.}
}
\value{
The output length is determined by the length of the input.
The output type is determined by the suffix:
\itemize{
\item No suffix: a list.
\item \verb{_lgl}, \verb{_int}, \verb{_dbl}, \verb{_chr} return a logical, integer, double,
or character vector respectively. It will be named if the input was named.
\item \code{walk()} returns the input \code{.x} (invisibly). This makes it easy to
use in a pipe.
}
}
\description{
These functions are variants of \code{\link[=map]{map()}} that iterate over two arguments at
a time.
}
\examples{
x <- list(1, 1, 1)
y <- list(10, 20, 30)

map2(x, y, \(x, y) x + y)
# Or just
map2(x, y, `+`)

# Split into pieces, fit model to each piece, then predict
by_cyl <- mtcars |> split(mtcars$cyl)
mods <- by_cyl |> map(\(df) lm(mpg ~ wt, data = df))
map2(mods, by_cyl, predict)
}
\seealso{
Other map variants: 
\code{\link{imap}()},
\code{\link{lmap}()},
\code{\link{map_if}()},
\code{\link{map}()},
\code{\link{modify}()},
\code{\link{pmap}()}
}
\concept{map variants}
